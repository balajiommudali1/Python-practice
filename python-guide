What is a REPL?
REPL stands for: Read, Evaluate, Print, Loop 

Each line is read, evaluated, the return value is then printed to the screen, and then the process repeats. 

Python ships with a REPL, and you can access it by running python3.6 from your terminal. 

$ python3.6
Python 3.6.4 (default, Jan  5 2018, 20:24:27)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-16)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
The >>> indicates that you can type on that line. Later on, you’ll also see a ... which means that you are currently in a scoped area and will need to enter a blank line (no spaces) before it evaluates the entire code block. 

The simplest use of this would be to do some math: 

>>> 1 + 1
2
>>>
2 is the return value of the expression, and it is then printed to the screen. If something doesn’t have a return value, then nothing will be printed to the screen and you’ll see the next prompt immediately. We’ll cover this later, but an example would be None: 

>>> None
>>>
Lastly, to exit the REPL, you can either type exit() (the parentheses are important), or you can hit Ctrl+d on your keyboard.

===============Creating and Running Python Scripts===============

Creating Our First Python Script
Let’s create our first script to write our obligatory “Hello, World!” program:

$ vim hello.py
From inside this file, we can enter the lines of Python that we need. For the “Hello, World!” example we only need:

print("Hello, World!")
There are a few different ways that we can run this file. The first is by passing it to the python3.6 CLI:

$ python3.6 hello.py
Hello, World!
Setting a Shebang
You’ll most likely want your scripts to be:

Executable from anywhere (in our $PATH).
Executable without explicitly using the python3.6 CLI.
Thankfully, we can set the process to interpret our scripts by setting a shebang at the top of the file: 

hello.py

#!/usr/bin/env python3.6
print("Hello, World")
We’re not quite done; now we need to make the file executable using chmod: 

$ chmod u+x hello.py
Run the script now by using ./hello.py and we’ll see the same result. If we’d rather not have a file extension on our script, we can now remove that since we’ve put a shebang in the file mv hello.py hello, and running ./hello will still result in the same thing. 

Adding Scripts to Our $PATH
Now we need to make sure that we can put this in our $PATH. For this course, we’ll be using a bin directory in our $HOME folder to store our custom scripts, but scripts can go into any directory that is in your $PATH. 

Let’s create a bin directory and move our script: 

$ mkdir ~/bin
$ mv hello ~/bin/
Here’s how we add this directory to the $PATH in our .bashrc (the .bashrc for this course already contains this): 

$ export PATH=$HOME/bin:$PATH
Finally, run the hello script from our $PATH: 

$ hello
Hello, World!






============= Installing Python 3 on Debian/Ubuntu======================
$ sudo su -
[root] $ apt update -y
[root] $ apt install -y \
  wget \
  build-essential \
  libssl-dev \
  zlib1g-dev \
  libbz2-dev \
  libreadline-dev \
  libsqlite3-dev \
  libncurses5-dev \
  libncursesw5-dev \
  xz-utils \
  tk-dev

[root] $ cd /usr/src
[root] $ wget http://python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz
[root] $ tar xf Python-3.6.4.tar.xz
[root] $ cd Python-3.6.4.tar.xz
[root] $ ./configure --enable-optimizations
[root] $ make altinstall
[root] $ exit

Note: make altinstall causes it to not replace the built in python executable.

Ensure that secure_path in /etc/sudoers file includes /usr/local/bin. The line should look something like this:

Defaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
Upgrade Pip (Might not be Necessary)
The version of pip that we have might be up-to-date, but it’s good practice to try to update it after the installation. We need to use the pip3.6 executable because we’re working with Python 3, and we use sudo so that we can write files under the /usr/local directory.

$ sudo pip3.6 install --upgrade pip.


Install in Mac

1. Download and install Homebrew from https://brew.sh
2. `brew cask install atom`
3. `brew install python3`
4. `pip3 install ipython`
5. `brew install awscli`
6. `brew install git`
7. `ssh-keygen -C <email>`
8. `ssh-add -K ~/.ssh/id_rsa`

================Histoty and Benefinits==============

- Created by Guido van Rossum
- First Appearance in 1991
- Used and supported by tech giants like Google and Youtube
- Supported two major versions of nearly a decade.

Language Features

- Object oriented Scripting Language.
- Dynamic & Strong Type System
- Functional Concepts ( Map, Reduce, Fileter and etc)
- Whitespace delimited with pseudo-code like syntax.

Key Points About Python:

Object-Oriented Scripting Language.
Dynamic & strong typing system.
Dynamic types are checked at runtime
Strong types don’t change implicitly, can’t add 1 and "something".
Supports functional concepts like map, reduce, filter, and list comprehension.
Whitespace delimited (no { or } around code blocks)
Pseudo-code like syntax
Extremely popular language used across many different disciplines (academia, data science, scripting, web development, etc.).
Large open source community and public package index (Pypi).
Runs on all major operating systems (historically more of a pain to run on Windows than Unix systems). Pre-installed on most *NIX systems (usually Python 2).
Supported by large companies such as Google & YouTube.
Consistently high on the Tiobe Index (one of the most searched programming languages). 4th as of the time of recording this.
Placed in the Stack Overflow Developer Survey’s top 10 for Most Popular Programming Languages, Most Loved Programming Languages, and placed number 1 as the “Most Wanted Language” (meaning it’s the language that deve
lopers want to use the most).

====================================================
Scripts become most interesting when they do the right thing based on the inputs that we provide. To start building robust scripts, we need to understand how to make comparisons and use conditionals.

Python Documentation For This Video
Comparisons
if/elif/else
Comparisons
There are some standard comparison operators that we’ll use that match pretty closely to those used in mathematical equations. Let’s take a look at them:

>>> 1 < 2
True
>>> 0 > 2
False
>>> 2 == 1
False
>>> 2 != 1
True
>>> 3.0 >= 3.0
True
>>> 3.1 <= 3.0
False
If we try to make comparisons of types that don’t match up, we will run into errors:

>>> 3.1 <= "this"
Traceback (most recent call last):
  File "", line 1, in 
TypeError: '<=' not supported between instances of 'float' and 'str'
>>> 3 <= 3.1
True
>>> 1.1 == "1.1"
False
>>> 1.1 == float("1.1")
True
We can compare more than just numbers. Here’s what it looks like when we compare strings:

>>> "this" == "this"
True
>>> "this" == "This"
False
>>> "b" > "a"
True
>>> "abc" < "b"
True
Notice that the string 'b' is considered greater than the strings 'a' and 'abc'. The characters are compared one at a time alphabetically to determine which is greater. This concept is used to sort strings alphabetically.

The in Check
We often get lists of information that we need to ensure contains (or doesn’t contain) a specific item. To make this check in Python, we’ll use the in and not in operations.

>>> 2 in [1, 2, 3]
True
>>> 4 in [1, 2, 3]
False
>>> 2 not in [1, 2, 3]
False
>>> 4 not in [1, 2, 3]
True
if/elif/else
With a grasp on comparisons, we can now look at how we can run different pieces of logic based on the values that we’re working with using conditionals. The keywords for conditionals in Python are if, elif, and else. Conditionals are the first language feature that we’re using that requires us to utilize whitespace to separate our code blocks. We will always use indentation of 4 spaces. The basic shape of an if statement is this:

if CONDITION:
    pass
The CONDITION portion can be anything that evaluates to True or False, and if the value isn’t explicitly a boolean, then it will be converted to determine how to carry out proceed past the conditional (basically using the bool constructor).

>>> if True:
...     print("Was True")
...
Was True
>>> if False:
...     print("Was True")
...
>>>
To add an alternative code path, we’ll use the else keyword, followed by a colon (:), and indenting the code underneath:

>>> if False:
...     print("Was True")
... else:
...     print("Was False")
...
Was False
In the even that we want to check multiple potential conditions we can use the elif CONDITION: statement. Here’s a more robust example:

>>> name = "Kevin"
>>> if len(name) >= 6:
...     print("name is long")
... elif len(name) == 5:
...     print("name is 5 characters")
... elif len(name) >= 4:
...     print("name is 4 or more")
... else:
...     print("name is short")
...
name is 5 characters
Notice that we fell into the first elif statement’s block and then the second elif block was never executed even though it was true. We can only exercise one branch in an if statement.

float
int
abs
bin
round
sum
max
min
for x in range(10): print(x)
sorted("abakjk")
reversed(sorted("abakjk"))
list(reversed(sorted("abakjk")))
''.join(reversed(sorted("abakjk")))
a_string.find('an')

In [57]: "hello, {0}, and welcome to {1}". format("robin", "Python")
Out[57]: 'hello, robin, and welcome to Python'





